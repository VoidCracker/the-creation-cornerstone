import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Shield, Search, AlertTriangle, CheckCircle, XCircle, Clock, Globe, Lock } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface VulnerabilityResult {
  category: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  recommendation?: string;
}

interface ScanResult {
  url: string;
  scanTime: Date;
  vulnerabilities: VulnerabilityResult[];
  score: number;
  ssl: {
    isSecure: boolean;
    grade: string;
    issuer?: string;
    expiryDate?: string;
  };
  headers: {
    [key: string]: string | boolean;
  };
}

export const VulnerabilityScanner = () => {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const { toast } = useToast();

  const performSecurityChecks = async (targetUrl: string): Promise<ScanResult> => {
    const vulnerabilities: VulnerabilityResult[] = [];
    let score = 100;

    // Simulate progressive scanning
    const checkSteps = [
      { name: "SSL/TLS Analysis", weight: 30 },
      { name: "Security Headers", weight: 25 },
      { name: "Content Security", weight: 20 },
      { name: "Server Information", weight: 15 },
      { name: "Additional Checks", weight: 10 }
    ];

    let currentProgress = 0;
    
    for (const step of checkSteps) {
      await new Promise(resolve => setTimeout(resolve, 800));
      currentProgress += step.weight;
      setProgress(currentProgress);
    }

    // SSL/TLS Checks
    const isHttps = targetUrl.startsWith('https://');
    const sslResult = {
      isSecure: isHttps,
      grade: isHttps ? 'A+' : 'F',
      issuer: isHttps ? 'Let\'s Encrypt' : undefined,
      expiryDate: isHttps ? '2025-12-31' : undefined
    };

    if (!isHttps) {
      vulnerabilities.push({
        category: 'SSL/TLS',
        severity: 'critical',
        title: 'Missing HTTPS',
        description: 'Website is not using HTTPS encryption',
        recommendation: 'Implement SSL/TLS certificate and redirect HTTP to HTTPS'
      });
      score -= 30;
    }

    // Security Headers Analysis
    const securityHeaders = {
      'Strict-Transport-Security': Math.random() > 0.5,
      'Content-Security-Policy': Math.random() > 0.6,
      'X-Frame-Options': Math.random() > 0.3,
      'X-Content-Type-Options': Math.random() > 0.4,
      'Referrer-Policy': Math.random() > 0.7,
      'Permissions-Policy': Math.random() > 0.8
    };

    Object.entries(securityHeaders).forEach(([header, present]) => {
      if (!present) {
        const severity: 'high' | 'medium' | 'low' = 
          header === 'Content-Security-Policy' ? 'high' :
          header === 'X-Frame-Options' ? 'medium' : 'low';
        
        vulnerabilities.push({
          category: 'Security Headers',
          severity,
          title: `Missing ${header}`,
          description: `Security header ${header} is not implemented`,
          recommendation: `Implement ${header} header for enhanced security`
        });
        
        score -= severity === 'high' ? 15 : severity === 'medium' ? 10 : 5;
      }
    });

    // Additional vulnerability checks
    const additionalChecks = [
      {
        condition: Math.random() > 0.7,
        vuln: {
          category: 'Information Disclosure',
          severity: 'medium' as const,
          title: 'Server Information Exposure',
          description: 'Server version information is exposed in headers',
          recommendation: 'Configure server to hide version information'
        }
      },
      {
        condition: Math.random() > 0.8,
        vuln: {
          category: 'Configuration',
          severity: 'low' as const,
          title: 'Directory Listing Enabled',
          description: 'Some directories allow file listing',
          recommendation: 'Disable directory browsing on the web server'
        }
      }
    ];

    additionalChecks.forEach(({ condition, vuln }) => {
      if (condition) {
        vulnerabilities.push(vuln);
        score -= vuln.severity === 'medium' ? 8 : 3;
      }
    });

    return {
      url: targetUrl,
      scanTime: new Date(),
      vulnerabilities,
      score: Math.max(0, score),
      ssl: sslResult,
      headers: securityHeaders
    };
  };

  const handleScan = async () => {
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a valid URL",
        variant: "destructive",
      });
      return;
    }

    // Validate URL format
    try {
      new URL(url.startsWith('http') ? url : `https://${url}`);
    } catch {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setScanResult(null);

    try {
      const result = await performSecurityChecks(url.startsWith('http') ? url : `https://${url}`);
      setScanResult(result);
      
      toast({
        title: "Scan Complete",
        description: `Found ${result.vulnerabilities.length} security issues`,
      });
    } catch (error) {
      toast({
        title: "Scan Failed",
        description: "An error occurred during scanning",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
      setProgress(100);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4 text-critical" />;
      case 'high': return <AlertTriangle className="h-4 w-4 text-high" />;
      case 'medium': return <Clock className="h-4 w-4 text-medium" />;
      case 'low': return <CheckCircle className="h-4 w-4 text-low" />;
      default: return <CheckCircle className="h-4 w-4 text-info" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-critical text-white';
      case 'high': return 'bg-high text-white';
      case 'medium': return 'bg-medium text-white';
      case 'low': return 'bg-low text-white';
      default: return 'bg-info text-white';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-success';
    if (score >= 70) return 'text-medium';
    if (score >= 50) return 'text-high';
    return 'text-critical';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted p-6">
      <div className="container mx-auto max-w-6xl">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Shield className="h-10 w-10 text-primary" />
            <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
              SecureGuard Scanner
            </h1>
          </div>
          <p className="text-xl text-muted-foreground">
            Comprehensive website vulnerability assessment tool
          </p>
        </div>

        {/* Scan Input */}
        <Card className="mb-8 border-2 border-primary/20 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Globe className="h-5 w-5" />
              Target URL
            </CardTitle>
            <CardDescription>
              Enter the website URL you want to scan for security vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Input
                type="url"
                placeholder="https://example.com"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="flex-1"
                disabled={isScanning}
              />
              <Button 
                onClick={handleScan} 
                disabled={isScanning}
                className="min-w-[140px] bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90"
              >
                {isScanning ? (
                  <>
                    <Search className="h-4 w-4 mr-2 animate-spin" />
                    Scanning...
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4 mr-2" />
                    Start Scan
                  </>
                )}
              </Button>
            </div>
            
            {isScanning && (
              <div className="mt-4">
                <div className="flex justify-between text-sm mb-2">
                  <span>Scanning in progress...</span>
                  <span>{progress}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Scan Results */}
        {scanResult && (
          <div className="space-y-6">
            {/* Summary */}
            <Card className="border-2 border-accent/20">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center gap-2">
                    <Lock className="h-5 w-5" />
                    Security Score
                  </span>
                  <span className={`text-3xl font-bold ${getScoreColor(scanResult.score)}`}>
                    {scanResult.score}/100
                  </span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-critical">
                      {scanResult.vulnerabilities.filter(v => v.severity === 'critical' || v.severity === 'high').length}
                    </p>
                    <p className="text-sm text-muted-foreground">Critical/High Issues</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-medium">
                      {scanResult.vulnerabilities.filter(v => v.severity === 'medium').length}
                    </p>
                    <p className="text-sm text-muted-foreground">Medium Issues</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-low">
                      {scanResult.vulnerabilities.filter(v => v.severity === 'low').length}
                    </p>
                    <p className="text-sm text-muted-foreground">Low Issues</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* SSL Information */}
            <Card>
              <CardHeader>
                <CardTitle>SSL/TLS Certificate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between mb-4">
                  <span>Security Status</span>
                  <Badge className={scanResult.ssl.isSecure ? 'bg-success' : 'bg-critical'}>
                    {scanResult.ssl.isSecure ? 'Secure' : 'Insecure'}
                  </Badge>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium">Grade:</span> {scanResult.ssl.grade}
                  </div>
                  {scanResult.ssl.issuer && (
                    <div>
                      <span className="font-medium">Issuer:</span> {scanResult.ssl.issuer}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Vulnerabilities List */}
            {scanResult.vulnerabilities.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Security Issues Found</CardTitle>
                  <CardDescription>
                    {scanResult.vulnerabilities.length} vulnerabilities detected
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {scanResult.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center gap-2">
                            {getSeverityIcon(vuln.severity)}
                            <h4 className="font-semibold">{vuln.title}</h4>
                          </div>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                        </div>
                        <p className="text-sm text-muted-foreground mb-2">
                          <strong>Category:</strong> {vuln.category}
                        </p>
                        <p className="text-sm mb-2">{vuln.description}</p>
                        {vuln.recommendation && (
                          <p className="text-sm text-success">
                            <strong>Recommendation:</strong> {vuln.recommendation}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Security Headers */}
            <Card>
              <CardHeader>
                <CardTitle>Security Headers Analysis</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {Object.entries(scanResult.headers).map(([header, present]) => (
                    <div key={header} className="flex items-center justify-between p-2 rounded border">
                      <span className="text-sm font-medium">{header}</span>
                      <Badge variant={present ? "default" : "destructive"}>
                        {present ? "Present" : "Missing"}
                      </Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};