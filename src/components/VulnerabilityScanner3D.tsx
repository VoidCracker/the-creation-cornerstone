import { useState } from 'react';
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Shield, Search, AlertTriangle, CheckCircle, XCircle, Clock, Globe, Lock, Zap } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Scene3D } from './3D/Scene3D';
import { AnimatedCard } from './AnimatedCard';
import { MatrixRain } from './MatrixRain';
import { GlitchText } from './GlitchText';

interface VulnerabilityResult {
  category: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  recommendation?: string;
}

interface ScanResult {
  url: string;
  scanTime: Date;
  vulnerabilities: VulnerabilityResult[];
  score: number;
  ssl: {
    isSecure: boolean;
    grade: string;
    issuer?: string;
    expiryDate?: string;
  };
  headers: {
    [key: string]: string | boolean;
  };
}

export const VulnerabilityScanner3D = () => {
  const [url, setUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const { toast } = useToast();

  const performSecurityChecks = async (targetUrl: string): Promise<ScanResult> => {
    const vulnerabilities: VulnerabilityResult[] = [];
    let score = 100;

    // Simulate progressive scanning with more dramatic delays
    const checkSteps = [
      { name: "Initializing Neural Network", weight: 15 },
      { name: "SSL/TLS Deep Scan", weight: 25 },
      { name: "Security Headers Analysis", weight: 20 },
      { name: "Penetration Testing", weight: 20 },
      { name: "AI Threat Detection", weight: 15 },
      { name: "Quantum Encryption Check", weight: 5 }
    ];

    let currentProgress = 0;
    
    for (const step of checkSteps) {
      await new Promise(resolve => setTimeout(resolve, 1200));
      currentProgress += step.weight;
      setProgress(currentProgress);
    }

    // SSL/TLS Checks
    const isHttps = targetUrl.startsWith('https://');
    const sslResult = {
      isSecure: isHttps,
      grade: isHttps ? 'A+' : 'F',
      issuer: isHttps ? 'Let\'s Encrypt Authority X3' : undefined,
      expiryDate: isHttps ? '2025-12-31' : undefined
    };

    if (!isHttps) {
      vulnerabilities.push({
        category: 'SSL/TLS',
        severity: 'critical',
        title: 'Missing HTTPS Encryption',
        description: 'Website is transmitting data without encryption, exposing users to man-in-the-middle attacks',
        recommendation: 'Implement SSL/TLS certificate and enforce HTTPS redirects'
      });
      score -= 35;
    }

    // Advanced Security Headers Analysis
    const securityHeaders = {
      'Strict-Transport-Security': Math.random() > 0.6,
      'Content-Security-Policy': Math.random() > 0.7,
      'X-Frame-Options': Math.random() > 0.4,
      'X-Content-Type-Options': Math.random() > 0.5,
      'Referrer-Policy': Math.random() > 0.8,
      'Permissions-Policy': Math.random() > 0.9,
      'X-XSS-Protection': Math.random() > 0.3,
      'Expect-CT': Math.random() > 0.8
    };

    Object.entries(securityHeaders).forEach(([header, present]) => {
      if (!present) {
        const severity: 'critical' | 'high' | 'medium' | 'low' = 
          header === 'Content-Security-Policy' ? 'critical' :
          header === 'X-Frame-Options' ? 'high' :
          header === 'Strict-Transport-Security' ? 'high' : 'medium';
        
        vulnerabilities.push({
          category: 'Security Headers',
          severity,
          title: `Missing ${header}`,
          description: `Critical security header ${header} is not implemented, leaving the site vulnerable`,
          recommendation: `Configure ${header} header with appropriate security policies`
        });
        
        score -= severity === 'critical' ? 20 : severity === 'high' ? 15 : 10;
      }
    });

    // Advanced vulnerability simulation
    const advancedChecks = [
      {
        condition: Math.random() > 0.6,
        vuln: {
          category: 'Information Disclosure',
          severity: 'high' as const,
          title: 'Server Fingerprinting Vulnerability',
          description: 'Server version and technology stack exposed through HTTP headers',
          recommendation: 'Configure server to suppress version information and use security headers'
        }
      },
      {
        condition: Math.random() > 0.7,
        vuln: {
          category: 'Configuration',
          severity: 'medium' as const,
          title: 'Directory Traversal Risk',
          description: 'Some directories allow unauthorized file access and listing',
          recommendation: 'Disable directory browsing and implement proper access controls'
        }
      },
      {
        condition: Math.random() > 0.8,
        vuln: {
          category: 'Authentication',
          severity: 'critical' as const,
          title: 'Weak Authentication Mechanisms',
          description: 'Login system vulnerable to brute force and credential stuffing attacks',
          recommendation: 'Implement multi-factor authentication and rate limiting'
        }
      },
      {
        condition: Math.random() > 0.75,
        vuln: {
          category: 'Injection',
          severity: 'critical' as const,
          title: 'SQL Injection Vulnerability',
          description: 'Database queries susceptible to malicious input injection',
          recommendation: 'Use parameterized queries and input validation'
        }
      }
    ];

    advancedChecks.forEach(({ condition, vuln }) => {
      if (condition) {
        vulnerabilities.push(vuln);
        score -= vuln.severity === 'critical' ? 25 : vuln.severity === 'high' ? 15 : 8;
      }
    });

    return {
      url: targetUrl,
      scanTime: new Date(),
      vulnerabilities,
      score: Math.max(0, score),
      ssl: sslResult,
      headers: securityHeaders
    };
  };

  const handleScan = async () => {
    if (!url) {
      toast({
        title: "Error",
        description: "Please enter a valid URL",
        variant: "destructive",
      });
      return;
    }

    try {
      new URL(url.startsWith('http') ? url : `https://${url}`);
    } catch {
      toast({
        title: "Invalid URL",
        description: "Please enter a valid URL format",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setScanResult(null);

    try {
      const result = await performSecurityChecks(url.startsWith('http') ? url : `https://${url}`);
      setScanResult(result);
      
      toast({
        title: "🛡️ Scan Complete",
        description: `Analyzed ${result.vulnerabilities.length} security vectors`,
      });
    } catch (error) {
      toast({
        title: "Scan Failed",
        description: "Neural network encountered an anomaly",
        variant: "destructive",
      });
    } finally {
      setIsScanning(false);
      setProgress(100);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4 text-critical animate-pulse" />;
      case 'high': return <AlertTriangle className="h-4 w-4 text-high animate-bounce" />;
      case 'medium': return <Clock className="h-4 w-4 text-medium animate-pulse-slow" />;
      case 'low': return <CheckCircle className="h-4 w-4 text-low" />;
      default: return <CheckCircle className="h-4 w-4 text-info" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-critical text-white animate-pulse';
      case 'high': return 'bg-high text-white';
      case 'medium': return 'bg-medium text-white';
      case 'low': return 'bg-low text-white';
      default: return 'bg-info text-white';
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-success animate-glow';
    if (score >= 70) return 'text-medium';
    if (score >= 50) return 'text-high animate-pulse-slow';
    return 'text-critical animate-pulse';
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Matrix Rain Background */}
      <MatrixRain />
      
      {/* 3D Scene Background */}
      <Scene3D 
        className="absolute inset-0 z-10" 
        scanActive={isScanning}
        vulnerabilities={scanResult?.vulnerabilities || []}
      />
      
      {/* Main Content */}
      <div className="relative z-20 min-h-screen bg-gradient-to-br from-background/90 via-background/70 to-background/90 p-6">
        <div className="container mx-auto max-w-6xl">
          
          {/* Futuristic Header */}
          <div className="text-center mb-8 animate-float">
            <div className="flex items-center justify-center gap-3 mb-4">
              <Shield className="h-12 w-12 text-primary animate-rotate-3d" />
              <h1 className="text-5xl font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent">
                <GlitchText glitchActive={isScanning}>
                  NEURAL SECURITY SCANNER
                </GlitchText>
              </h1>
              <Zap className="h-8 w-8 text-accent animate-pulse" />
            </div>
            <p className="text-xl text-muted-foreground font-mono">
              Advanced AI-Powered Cybersecurity Analysis Platform
            </p>
          </div>

          {/* Enhanced Scan Input */}
          <AnimatedCard variant="glow" className="mb-8">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-2xl">
                <Globe className="h-6 w-6 animate-float" />
                Target Acquisition
              </CardTitle>
              <CardDescription className="text-lg">
                Initialize deep neural scan of target infrastructure
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex gap-4">
                <Input
                  type="url"
                  placeholder="https://target-domain.com"
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  className="flex-1 text-lg h-12 bg-background/50 border-2 border-primary/30 focus:border-primary transition-all"
                  disabled={isScanning}
                />
                <Button 
                  onClick={handleScan} 
                  disabled={isScanning}
                  className="min-w-[160px] h-12 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-lg font-bold animate-glow"
                >
                  {isScanning ? (
                    <>
                      <Search className="h-5 w-5 mr-2 animate-spin" />
                      SCANNING...
                    </>
                  ) : (
                    <>
                      <Search className="h-5 w-5 mr-2" />
                      INITIATE SCAN
                    </>
                  )}
                </Button>
              </div>
              
              {isScanning && (
                <div className="mt-6">
                  <div className="flex justify-between text-sm mb-3">
                    <span className="font-mono text-primary">
                      <GlitchText glitchActive>Neural network processing...</GlitchText>
                    </span>
                    <span className="font-bold text-accent">{progress}%</span>
                  </div>
                  <Progress value={progress} className="h-3 animate-pulse" />
                  <div className="mt-2 text-xs text-muted-foreground font-mono">
                    Deploying quantum security algorithms...
                  </div>
                </div>
              )}
            </CardContent>
          </AnimatedCard>

          {/* Enhanced Results */}
          {scanResult && (
            <div className="space-y-6">
              
              {/* Security Score with 3D effects */}
              <AnimatedCard variant="scan" delay={200}>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between text-2xl">
                    <span className="flex items-center gap-3">
                      <Lock className="h-6 w-6 animate-float" />
                      Security Assessment
                    </span>
                    <span className={`text-5xl font-bold ${getScoreColor(scanResult.score)}`}>
                      {scanResult.score}/100
                    </span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                    <div className="text-center">
                      <p className="text-3xl font-bold text-critical animate-pulse">
                        {scanResult.vulnerabilities.filter(v => v.severity === 'critical').length}
                      </p>
                      <p className="text-sm text-muted-foreground font-mono">CRITICAL</p>
                    </div>
                    <div className="text-center">
                      <p className="text-3xl font-bold text-high">
                        {scanResult.vulnerabilities.filter(v => v.severity === 'high').length}
                      </p>
                      <p className="text-sm text-muted-foreground font-mono">HIGH RISK</p>
                    </div>
                    <div className="text-center">
                      <p className="text-3xl font-bold text-medium">
                        {scanResult.vulnerabilities.filter(v => v.severity === 'medium').length}
                      </p>
                      <p className="text-sm text-muted-foreground font-mono">MEDIUM</p>
                    </div>
                    <div className="text-center">
                      <p className="text-3xl font-bold text-low">
                        {scanResult.vulnerabilities.filter(v => v.severity === 'low').length}
                      </p>
                      <p className="text-sm text-muted-foreground font-mono">LOW RISK</p>
                    </div>
                  </div>
                </CardContent>
              </AnimatedCard>

              {/* Enhanced SSL Information */}
              <AnimatedCard variant="float" delay={400}>
                <CardHeader>
                  <CardTitle className="text-xl">🔐 Encryption Analysis</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between mb-4">
                    <span className="font-mono">Security Protocol Status</span>
                    <Badge className={scanResult.ssl.isSecure ? 'bg-success animate-glow' : 'bg-critical animate-pulse'}>
                      {scanResult.ssl.isSecure ? '🛡️ SECURED' : '⚠️ VULNERABLE'}
                    </Badge>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm font-mono">
                    <div>
                      <span className="text-muted-foreground">Security Grade:</span> 
                      <span className={scanResult.ssl.grade === 'A+' ? 'text-success ml-2' : 'text-critical ml-2'}>
                        {scanResult.ssl.grade}
                      </span>
                    </div>
                    {scanResult.ssl.issuer && (
                      <div>
                        <span className="text-muted-foreground">Certificate Authority:</span>
                        <span className="ml-2">{scanResult.ssl.issuer}</span>
                      </div>
                    )}
                  </div>
                </CardContent>
              </AnimatedCard>

              {/* Enhanced Vulnerabilities */}
              {scanResult.vulnerabilities.length > 0 && (
                <AnimatedCard variant="glow" delay={600}>
                  <CardHeader>
                    <CardTitle className="text-xl">🚨 Threat Vector Analysis</CardTitle>
                    <CardDescription className="font-mono">
                      {scanResult.vulnerabilities.length} security anomalies detected by neural network
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {scanResult.vulnerabilities.map((vuln, index) => (
                        <AnimatedCard key={index} variant="scan" delay={index * 100} className="border-l-4 border-l-critical/50">
                          <div className="p-4">
                            <div className="flex items-start justify-between mb-3">
                              <div className="flex items-center gap-3">
                                {getSeverityIcon(vuln.severity)}
                                <h4 className="font-semibold text-lg">{vuln.title}</h4>
                              </div>
                              <Badge className={getSeverityColor(vuln.severity)}>
                                {vuln.severity.toUpperCase()}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground mb-2 font-mono">
                              <strong>Vector:</strong> {vuln.category}
                            </p>
                            <p className="text-sm mb-3">{vuln.description}</p>
                            {vuln.recommendation && (
                              <div className="bg-success/10 border border-success/20 rounded p-3">
                                <p className="text-sm text-success">
                                  <strong>🛠️ Remediation:</strong> {vuln.recommendation}
                                </p>
                              </div>
                            )}
                          </div>
                        </AnimatedCard>
                      ))}
                    </div>
                  </CardContent>
                </AnimatedCard>
              )}

              {/* Enhanced Security Headers */}
              <AnimatedCard variant="float" delay={800}>
                <CardHeader>
                  <CardTitle className="text-xl">📡 HTTP Security Headers Matrix</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries(scanResult.headers).map(([header, present]) => (
                      <div key={header} className="flex items-center justify-between p-3 rounded border border-primary/20 bg-card/50 backdrop-blur">
                        <span className="text-sm font-mono">{header}</span>
                        <Badge variant={present ? "default" : "destructive"} className={present ? "animate-glow" : "animate-pulse"}>
                          {present ? "✅ ACTIVE" : "❌ MISSING"}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </AnimatedCard>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};